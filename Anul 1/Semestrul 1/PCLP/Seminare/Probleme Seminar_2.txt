#include <iostream>

using namespace std;

void afisareVector(int a[], int n);
void inversareVector(int a[], int dimA, int rez[], int& dimRez);
void inversare(int a[], int dimA);
void interschimbare(int& a, int& b);
void reuniune(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez);
int seAfla(int a[], int n, int x);
void reuniuneFaraDuplicate(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez);
void diferenta(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez);
void intesectie(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez);
void inserare(int a[], int& n, int x, int poz);
void stergere(int a[], int n, int poz);

int main()
{
    int a[] = {1, 2, 1, 4};
    int dimA = 4;

    int b[] = {-1, -2, 4};
    int dimB = 3;

    int rez[100];
    int dimRez;

    //inversareVector(a, dimA, rez, dimRez);
    //inversare(a, dimA);
    //reuniune(a, dimA, b, dimB, rez, dimRez);
    //reuniuneFaraDuplicate(a, dimA, b, dimB, rez, dimRez);
    //diferenta(a, dimA, b, dimB, rez, dimRez);
    //intesectie(a, dimA, b, dimB, rez, dimRez);

    inserare(a, dimA, 2737, 3);
    stergere(a, dimA, 0);

    afisareVector(a, dimA);


    return 0;
}

void inserare(int a[], int& n, int x, int poz) {

    for (int i = n - 1; i >= poz; i--) {
        a[i + 1] = a[i];
    }

    a[poz] = x;
    n++;
}

void stergere(int a[], int n, int poz) {
    for (int i = poz; i < n - 1; i++) {
        a[i] = a[i + 1];
    }

    n--;
}

// reuniunea a 2 vectori
void reuniune(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez) {
    dimRez = 0;

    for (int i = 0; i < dimA; i++) {
        rez[dimRez] = a[i];
        dimRez++;
    }

    for (int i = 0; i < dimB; i++) {
        rez[dimRez] = b[i];
        dimRez++;
    }
}

void reuniuneFaraDuplicate(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez)
{
    dimRez = 0;
    // parcurg elementele din primul vector
    for (int i = 0; i < dimA; i++) {
        if (seAfla(rez, dimRez, a[i]) == -1) {
            rez[dimRez] = a[i];
            dimRez++;
        }
    }

    // parcurg vectorul b
    for (int i = 0; i < dimB; i++) {
        if (seAfla(rez, dimRez, b[i]) == -1) {
            rez[dimRez] = b[i];
            dimRez++;
        }
    }
}

void intesectie(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez) {
    dimRez = 0;

    // parcurgem primul vector
    for (int i = 0; i < dimA; i++) {
        // verific daca elementul curent se afla in vectorul b
        if (seAfla(b, dimB, a[i]) != -1) {
            rez[dimRez] = a[i];
            dimRez++;
        }
    }

}

void diferenta(int a[], int dimA, int b[], int dimB, int rez[], int& dimRez) {
    dimRez = 0;

    // parcurgem vectorul a
    for (int i = 0; i < dimA; i++) {
        // verificam ca elemetul curent a[i] nu se afla in vectorul b
        if (seAfla(b, dimB, a[i]) == -1) {
            rez[dimRez] = a[i];
            dimRez++;
        }
    }

    // parcurgem vectorul b
    for (int i = 0; i < dimB; i++) {
        // verificam daca elemetul curent b[i] se afla sau nu in vectorul a
        if (seAfla(a, dimA, b[i]) == -1) {
            rez[dimRez] = b[i];
            dimRez++;
        }
    }
}

// o functie care imi spune daca un elemenet se afla intr-un vector
int seAfla(int a[], int n, int x) {
    for (int i = 0; i < n; i++) {
        if (x == a[i]) {
            // l-am gasit
            return i;
        }
    }

    return -1;
}

// o functie care inverseaza un vector in alt vector
void inversareVector(int a[], int dimA, int rez[], int& dimRez)
{
    dimRez = 0;

    for (int i = dimA - 1; i >= 0; i--) {
        rez[dimRez] = a[i];
        dimRez++;
    }
}

// o functie care inverseaza un vector
void inversare(int a[], int dimA) {
    for (int i = 0; i < dimA / 2; i++) {
        // interschimbam elementul i cu n-i-1
        //int aux = a[i];
        //a[i] = a[dimA - i - 1];
        //a[dimA - i - 1] = aux;
        interschimbare(a[i], a[dimA - i - 1]);
    }
}

// o functie care interschimba 2 variabile
void interschimbare(int& a, int& b) {
    int aux = a;
    a = b;
    b = aux;
}

// functie care afiseaza un vector
void afisareVector(int a[], int n) {
    for (int i = 0; i < n; i++) {
        cout << a[i] << " ";
    }

    cout << endl;
}
