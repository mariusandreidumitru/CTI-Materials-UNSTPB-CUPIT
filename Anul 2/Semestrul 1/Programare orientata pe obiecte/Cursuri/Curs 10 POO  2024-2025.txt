CURS 10

Un alt exemplu de mostenire, pentru o clasa ce modeleaza un cont bancar.
//Clasa de baza:

public class ContBancar {
	private double suma;

	public ContBancar(double suma) {
		this.suma = suma;
	}

	public double getSuma() {
		return suma;
	}

	public void setSuma(double suma) {
		this.suma = suma;
	}

	public void adauga(double s) {
		suma = suma + s;
	}

	public boolean extrage(double s) {
		if (s > suma)
			return false;
		suma = suma - s;
		return true;
	}
}

//clasaderiva:

public class ContBancarCuDobanda extends ContBancar{
	private double rataD;//rata dobanzii anuale

	public ContBancarCuDobanda(double suma, double rataD) {
		super(suma);
		this.rataD = rataD;
	}

	public double getRataD() {
		return rataD;
	}

	public void setRataD(double rataD) {
		this.rataD = rataD;
	}
	
	public void adaugaDobandaDupaOLuna() {
		double sum=getSuma();
		double dobandaLunara=sum*rataD/12;
		sum+=dobandaLunara;
		setSuma(sum);
	}
	

}

public class Main {

	public static void main(String[] args) {
		ContBancarCuDobanda cbd=new ContBancarCuDobanda(10000,0.1);
		cbd.adaugaDobandaDupaOLuna();
		System.out.println("suma din cont="+cbd.getSuma());
	}

}

public class Main 


CLASE ABSTRACTE. INTERFETE.
O clasa abstracta este o clasa ce contine ca orice clasa normala var. de instanta si metode, dar, se poate ca 
unele metode sa nu aiba implementare (sunt doar declarate)
Metodele fara implementare (abstracte) sunt declarate cu cuvantul cheie abstract.
Clasa abstracta serveste ca un sablon iar implementarea va fi data in clasele derivate din clasa abstracta.

IMP: Nu se pot instantia obiecte dintr-o clasa abstracta !
O clasa abstracta se declara cu cuvantul cheie abstract.
abstract class A{
  ....
}
Nu putem avea:
A obiect=new A(); //GRESIT !

Dar putem avea:
class D extends A {....}
D obiect=new D();//DA

Exemplu de clasa abstracta:
abstract class A{
 abstract public void calcul(int N);
 public void afisareDurataCalcul(int N){
	 //timpul sistem inainte de apel:
	 long T1=System.currentTimeMillis();
	 //apelez metoda:
	 calcul(1000);
	 //timpul sistem dupa apel:
	 long T2=System.currentTimeMillis();
	 long durataCalcul=T2-T1;//in milisecunde
	 System.out.println("durata calcul: "+durataCalcul+" ms.");
 }
   
}

public class D extends A{
	public void calcul(int N) {
		int i,j,k;
		long rezultat;
		for(i=1;i<=N;i++)
			for(j=1;j<=N;j++)
				for(k=1;k<=N;k++)
					rezultat=i*j*k;
	}

}
public class D1 extends A{
	public void calcul(int N) {
		int i,j,k;
		long rezultat;
		for(i=1;i<=N;i++)
			for(j=1;j<=N;j++)
				for(k=1;k<=N;k++)
					rezultat=i+j+k;
	}

}

public class Main {

	public static void main(String[] args) {
		D d=new D();
		d.afisareDurataCalcul(1000);
		D1 d1=new D1();
		d1.afisareDurataCalcul(1000);
	}

}


Interfete.
(nu are legatura cu interfetele grafice nici cu interfetele electronice!)
 O intrfata in POO generalizeaza conceptul de clasa abstracta in sensul ca intr-o interfata 
 toate metodele nu au implementare.
 Intr-o interfata, toate metodele declarate nu au implementare, sunt doar semnaturile lor.
 O interfata poate sa declare si constante, pe langa semnaturile de metode.
 Dar o clasa ce implementeaza o interfata anume trebuie sa dea implementarea
la TOATE metodele declarate in interfata.
Exeemplu: interfata Comparable declara o singura metoda: compareTo() pt a compara 
doua obiecte.
O clasa ce implementeaza o anumita interfata, specifica aceasta prin cuvantul cheie 
implements.

Ex: 
 interfata ActionListener folosita in programarea grafica in Java, declara 
o singura metoda: public void actionPerformed(ActionEvent ev)
O clasa ce implementeaza interfata ActionListener , obligatoriu va da implementarea
metodei actionPerformed().

Ex:
interfata Comparable declara o singura metoda cu semnatura:
  public int compareTo(Object obj)

Noi putem defini o interfata folosind cuvantul cheie interface.

Exemplu
Definim interfata Forma in care declaram doua semnaturi de metode: perimetru() si 
arie()
public interface Forma{
 public double perimetru();//perimetrul unei figuri geometrice
 public double arie();
}


public class Patrat implements Forma{
	private double a;

	public Patrat(double a) {
		this.a = a;
	}

	public double getA() {
		return a;
	}

	public void setA(double a) {
		this.a = a;
	}
	public double perimetru() {
		return 4*a;
	}
	public double arie() {
		return a*a;
	}
}
 

public class Dreptunghi implements Forma{
	private double a,b;

	public Dreptunghi(double a, double b) {
		this.a = a;
		this.b = b;
	}

	public double getA() {
		return a;
	}

	public void setA(double a) {
		this.a = a;
	}

	public double getB() {
		return b;
	}

	public void setB(double b) {
		this.b = b;
	}
	public double perimetru() {
		return 2*a+2*b;
	}
	public double arie() {
		return a*b;
	}
	
}
 

 

public class Main {

	public static void main(String[] args) {
		Patrat p=new Patrat(2);
		System.out.println("perimetru patrat="+p.perimetru());
		Dreptunghi d=new Dreptunghi(3,2);
		System.out.println("perimetru dreptunghi="+d.perimetru());
		System.out.println("arie dreptunghi="+d.arie());
	}

}

Tema:
Adaugati si o clasa Cerc ce implementeaza Forma.

 Interfetele au ca avantaj ca reduc spatiul de nume de metode!

O aplicatie a interfetei Comparable:
ea declara metoda : public int compareTo(Object obj)
Vom folosi aceasta interfata pentru a sorta dupa un alt criteriu de sortare,un vector de obiecte.

 Putem sorta un vector folosind metoda sort() din clasa Arrays.
Ex: sortarea unui vector de numere intregi.
import java.util.Arrays;

public class Main {

	public static void main(String[] args) {
		int a[]= {3,7,6,1,2};
		Arrays.sort(a);
		//afisare:
		int i;
		for(i=0;i<a.length;i++)
			System.out.print(a[i]+" ");
	}

}

La putem sorta in ordine alfabetica un vector de cuvinte.
import java.util.Arrays;

public class Main {

	public static void main(String[] args) {
		String a[]= {"unu","doi","mar","para","abcd"};
		Arrays.sort(a);
		//afisare:
		int i;
		for(i=0;i<a.length;i++)
			System.out.print(a[i]+" ");
	}

}


Pentru a sorta un vector de obiecte Punct in ordinea crescatoare a distantelor 
fata de origine, nu mai putem folosi in mod direct Arrays.sort(vectorDePuncte) !
Ex:
(7,8), (1,2), (10,20), (5,5)
Ordinea dupa distantele fata de origine:
(1,2), (5,5), (7,8), (10,20)

Cum am putea face sortarea folosind tot Arrays.sort() ?
Daca avem o implementare a metodei compareTo() conform acestui criteriu de 
sortare, in clasa Punct, atunci vom putea folosi Arrays.sort() pentru a 
sorta vectorul de puncte !
public class Punct implements Comparable {
	private int x;
	private int y;

	public Punct(int x, int y) {
		this.x = x;
		this.y = y;
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	//distanta fata de origine:
        public double dist0() {
		return Math.sqrt(x * x + y * y);
	}

	@Override
	public String toString() {
		return "(" + x + "," + y + ")";
	}
	public int compareTo(Object obj) {
		double distOriginePunctCrt=this.dist0();
		Punct p=(Punct)obj;
		double distOriginePunctP=p.dist0();
		if(distOriginePunctCrt>distOriginePunctP)return 1;
		else if(distOriginePunctCrt==distOriginePunctP)return 0;
		else return -1;
	}

}

import java.util.Arrays;

public class Main {

	public static void main(String[] args) {
		// (7,8), (1,2), (10,20), (5,5)
		Punct p[]= {new Punct(7,8), new Punct(1,2), new Punct(10,20),
				    new Punct(5,5)};
		Arrays.sort(p);
		//afisare vector sortat:
		int i;
		for(i=0;i<p.length;i++)
			System.out.println(p[i].toString());
		}//main

	}


Tema
Sa sortam un vector de obiecte dreptunghi in ordinea crescatoare a suprafetelor,
folosind Arrays.sort() - problema tipica de examen !
/////////////////////////////////////////////////////////////////////////

                 